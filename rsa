#!/usr/bin/python3
# This is a script to factorize large numbers using Pollard's rho algorithm
import time # Import the time module to measure the execution time
import math # Import the math module to use the gcd function
import sys # Import the sys module to access the command-line arguments

def pollard_rho(n):
    # This is a function that implements Pollard's rho algorithm to find a non-trivial factor of n
    # Check if the number is even
    if n % 2 == 0:
        return 2 # If n is even, return 2 as a factor
    
    x = 2 # Initialize x to 2
    y = 2 # Initialize y to 2
    d = 1 # Initialize d to 1
    
    # Define the function for generating the next value in the sequence
    f = lambda x: (x**2 + 1) % n # This is a polynomial function modulo n
    
    # Pollard's rho algorithm
    while d == 1:
        # Generate new values for x and y using the function f(x)
        x = f(x) # Update x with the next value generated by applying f(x)
        y = f(f(y)) # Update y with the next value generated by applying f(f(y))
        # Calculate the greatest common divisor between |x - y| and n
        d = math.gcd(abs(x - y), n) # Update d to gcd(|x - y|, n)
    
    return d # Return the non-trivial factor

def is_prime(num):
    # This is a function that checks if a number is prime
    if num < 2:
        # If num is less than 2, it is not prime, so return False
        return False
    for i in range(2, int(math.sqrt(num)) + 1):
        # If num is divisible by any number in the range [2, sqrt(num)], it is not prime, so return False
        if num % i == 0:
            return False
    # If num is not divisible by any number in the range [2, sqrt(num)], it is prime, so return True
    return True

def main():
    # This is the main function that reads the input file and prints the factors of each number
    # Check if the correct number of command-line arguments is provided
    if len(sys.argv) != 2:
        print("Usage: python factorize.py <file>") # Print the correct usage of the program
        return # Exit the program if the correct arguments are not provided

    file_path = sys.argv[1] # Get the file path from the command-line argument

    start_time = time.time() # Record the start time
    try:
        with open(file_path, 'r') as file: # Use a context manager to handle the file
            # Read the first line of the file and convert it to an integer
            number = int(file.readline().strip())
        # Factorize the number using Pollard's rho algorithm
        p = pollard_rho(number) # Call the pollard_rho function on number
        # Continue factorizing until a prime factor is found
        while not is_prime(p):
            p = pollard_rho(p) # Call the pollard_rho function on p
        q = number // p # Calculate the other factor by integer division
        # The number is prime
        if p == number or q == number:
            print(f"{number} is prime.") # Print that the number is prime using an f-string
        else:
            # Print the prime factors
            print(f"{number}={p}*{q}") # Print the factors using an f-string

        if time.time() - start_time > 5: # If the execution time exceeds 5 seconds
            print("Time limit exceeded") # Print a warning message
            exit() # Exit the program
    
    except FileNotFoundError: # Handle the exception if the file is not found
        print(f"File '{file_path}' not found.") # Print an error message using an f-string


if __name__ == '__main__':
    main() # Call the main function when the script is executed
